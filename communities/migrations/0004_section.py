# Generated by Django 4.2.25 on 2025-10-15 21:33

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0007_remove_redundant_fields_from_community_analytics'),
        ('communities', '0003_thread_best_post'),
    ]

    operations = [
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Section name (e.g., 'Events', 'Help & Support')", max_length=100)),
                ('slug', models.SlugField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('icon', models.CharField(blank=True, help_text="Emoji or icon (e.g., 'ðŸ“…', 'fa-calendar')", max_length=50)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within parent or community')),
                ('color', models.CharField(blank=True, help_text="Hex color for badge (e.g., '#3B82F6')", max_length=7)),
                ('depth', models.PositiveIntegerField(default=0, help_text='0=top-level, 1=sub-section, 2=sub-sub-section, etc.')),
                ('path', models.CharField(blank=True, help_text="Materialized path (e.g., '001.002.003')", max_length=500)),
                ('allow_threads', models.BooleanField(default=True, help_text='Allow creating threads in this section')),
                ('allow_direct_posts', models.BooleanField(default=True, help_text='Allow posts directly in section without threads')),
                ('require_approval', models.BooleanField(default=False, help_text='Require moderator approval for new threads/posts')),
                ('is_locked', models.BooleanField(default=False, help_text='Lock section (read-only)')),
                ('inherit_permissions', models.BooleanField(default=True, help_text='Inherit permissions from parent section')),
                ('threads_count', models.PositiveIntegerField(default=0)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('subsections_count', models.PositiveIntegerField(default=0)),
                ('total_threads_count', models.PositiveIntegerField(default=0)),
                ('total_posts_count', models.PositiveIntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_hidden', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='communities.community')),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_sections', to='accounts.userprofile')),
                ('parent_section', models.ForeignKey(blank=True, help_text='Parent section for nesting. Null for top-level sections.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsections', to='communities.section')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'ordering': ['-is_pinned', 'order', 'name'],
                'indexes': [models.Index(fields=['community', 'parent_section', 'is_archived'], name='communities_communi_7e13b6_idx'), models.Index(fields=['path'], name='communities_path_bcaaab_idx'), models.Index(fields=['depth'], name='communities_depth_0f846e_idx')],
                'unique_together': {('community', 'slug', 'parent_section')},
            },
        ),
    ]
