# Generated by Django 4.2.24 on 2025-09-29 10:49

import content.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('communities', '0001_initial'),
        ('accounts', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutoModerationAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('action_type', models.CharField(choices=[('flagged', 'Content Flagged'), ('hidden', 'Content Hidden'), ('deleted', 'Content Deleted'), ('user_warned', 'User Warned'), ('user_restricted', 'User Restricted'), ('escalated', 'Escalated to Human'), ('approved', 'Content Approved'), ('rejected', 'Content Rejected')], max_length=20)),
                ('reason', models.TextField(max_length=1000)),
                ('action_taken', models.CharField(blank=True, help_text='Specific action taken', max_length=50)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional action details')),
                ('confidence_score', models.FloatField(help_text='Confidence in the moderation decision 0.0-1.0')),
                ('severity_level', models.IntegerField(default=1, help_text='Severity level 1-10')),
                ('status', models.CharField(choices=[('active', 'Active'), ('overridden', 'Overridden by Human'), ('expired', 'Expired'), ('appealed', 'Under Appeal')], default='active', max_length=20)),
                ('review_decision', models.CharField(blank=True, help_text="Human moderator's decision", max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When action expires (for temporary actions)', null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auto_moderation_actions_reviewed', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=1000)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('dislikes_count', models.PositiveIntegerField(default=0)),
                ('replies_count', models.PositiveIntegerField(default=0)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('is_best', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='content.comment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentExperiment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Experiment name', max_length=200, unique=True)),
                ('description', models.TextField(blank=True, help_text='Experiment description')),
                ('control_algorithm', models.CharField(choices=[('content_based', 'Content Based'), ('collaborative', 'Collaborative Filtering'), ('trending', 'Trending Content'), ('trending_24h', 'Trending 24 Hours'), ('trending_week', 'Trending This Week'), ('geo_based', 'Geographical Based'), ('popular', 'Popular Content'), ('similar_users', 'Similar Users'), ('hashtag_based', 'Hashtag Based'), ('manual', 'Manual Recommendation')], default='hybrid', help_text='Control algorithm (baseline)', max_length=50)),
                ('test_algorithm', models.CharField(choices=[('content_based', 'Content Based'), ('collaborative', 'Collaborative Filtering'), ('trending', 'Trending Content'), ('trending_24h', 'Trending 24 Hours'), ('trending_week', 'Trending This Week'), ('geo_based', 'Geographical Based'), ('popular', 'Popular Content'), ('similar_users', 'Similar Users'), ('hashtag_based', 'Hashtag Based'), ('manual', 'Manual Recommendation')], help_text='Test algorithm (variant)', max_length=50)),
                ('traffic_split', models.FloatField(default=0.5, help_text='Percentage of users in test group (0.0-1.0)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_content_experiments', to='accounts.userprofile')),
            ],
            options={
                'verbose_name': 'Content Experiment',
                'verbose_name_plural': 'Content Experiments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentModerationRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('rule_type', models.CharField(choices=[('keyword', 'Keyword Filter'), ('ml_toxicity', 'ML Toxicity Detection'), ('ml_spam', 'ML Spam Detection'), ('sentiment', 'Sentiment Analysis'), ('image_content', 'Image Content Analysis'), ('video_content', 'Video Content Analysis'), ('audio_content', 'Audio Content Analysis'), ('link_safety', 'Link Safety Check'), ('language_detection', 'Language Detection')], max_length=20)),
                ('description', models.TextField(max_length=500)),
                ('configuration', models.JSONField(default=dict, help_text='Rule-specific configuration (keywords, thresholds, etc.)')),
                ('pattern_data', models.JSONField(blank=True, default=dict, help_text='Pattern matching data for the rule')),
                ('severity', models.IntegerField(default=1, help_text='Rule severity level')),
                ('action', models.CharField(choices=[('flag', 'Flag for Review'), ('hide', 'Hide Content'), ('delete', 'Delete Content'), ('warn_user', 'Warn User'), ('restrict_user', 'Restrict User'), ('escalate', 'Escalate to Human Moderator')], max_length=20)),
                ('severity_level', models.IntegerField(default=1, help_text='Severity level 1-10, affects escalation priority')),
                ('is_active', models.BooleanField(default=True)),
                ('applies_to_posts', models.BooleanField(default=True)),
                ('applies_to_comments', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('community', models.ForeignKey(blank=True, help_text='If set, rule applies only to this community', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moderation_rules', to='communities.community')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_moderation_rules', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ContentRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('score', models.FloatField(help_text='Recommendation score between 0 and 1')),
                ('reason', models.TextField(blank=True, help_text='Human-readable reason for recommendation')),
                ('recommendation_type', models.CharField(choices=[('content_based', 'Content Based'), ('collaborative', 'Collaborative Filtering'), ('trending', 'Trending Content'), ('trending_24h', 'Trending 24 Hours'), ('trending_week', 'Trending This Week'), ('geo_based', 'Geographical Based'), ('popular', 'Popular Content'), ('similar_users', 'Similar Users'), ('hashtag_based', 'Hashtag Based'), ('manual', 'Manual Recommendation')], default='content_based', max_length=20)),
                ('rank', models.PositiveIntegerField(default=0, help_text='Rank in the recommendation list')),
                ('algorithm_version', models.CharField(default='v1.0', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional algorithm-specific metadata')),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this recommendation expires', null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='accounts.userprofile')),
            ],
            options={
                'ordering': ['-score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DirectShare',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note', models.TextField(blank=True, help_text='Optional note to recipients', max_length=500)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('is_trending', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, max_length=2000)),
                ('post_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('file', 'File'), ('link', 'Link'), ('poll', 'Poll'), ('repost', 'Simple Repost'), ('repost_with_media', 'Repost + Media'), ('repost_quote', 'Quote Repost'), ('repost_remix', 'Remix Repost'), ('mixed', 'Mixed Media')], default='text', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('followers', 'Followers'), ('private', 'Private'), ('community', 'Community Only')], default='public', max_length=10)),
                ('link_image', models.URLField(blank=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('dislikes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('repost_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('trend_score', models.FloatField(default=0.0, help_text='Score based on engagement and recency')),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='accounts.userprofile')),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='communities.community')),
                ('parent_post', models.ForeignKey(blank=True, help_text='Original post if this is a repost', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_reposts', to='content.post')),
                ('thread', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='communities.thread')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('file', 'File')], max_length=10)),
                ('file', models.FileField(upload_to=content.models.postmedia_file_upload_to)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=content.models.postmedia_thumbnail_upload_to)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='content.post')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ModerationQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Normal'), (3, 'High'), (4, 'Critical'), (5, 'Emergency')], default=2)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('in_review', 'In Review'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('reason', models.TextField(max_length=500)),
                ('escalated', models.BooleanField(default=False)),
                ('escalated_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When queue item expires if not reviewed', null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_moderation_queue', to='accounts.userprofile')),
                ('auto_moderation_action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='queue_entries', to='content.automoderationaction')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_queue_items', to='content.contentmoderationrule')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_moderation_queue', to='accounts.userprofile')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_queue_items', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_mentions', to='content.comment')),
                ('mentioned_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_mentions_received', to='accounts.userprofile')),
                ('mentioning_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_mentions_sent', to='accounts.userprofile')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_mentions', to='content.post')),
            ],
        ),
        migrations.CreateModel(
            name='MediaMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('original_filename', models.CharField(blank=True, help_text='Original filename when uploaded', max_length=255)),
                ('duration', models.DurationField(blank=True, help_text='Duration for video/audio files', null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Width and height for images/videos')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=255)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('encoding', models.CharField(blank=True, max_length=50)),
                ('quality', models.CharField(blank=True, help_text='Quality setting (e.g., high, medium, low)', max_length=20)),
                ('is_processed', models.BooleanField(default=False, help_text='Whether media processing is complete')),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('post_media', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='content.postmedia')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Dislike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='DirectShareRecipient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('direct_share', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='content.directshare')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='direct_share_deliveries', to='accounts.userprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='directshare',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='direct_shares', to='content.post'),
        ),
        migrations.AddField(
            model_name='directshare',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='direct_shares_sent', to='accounts.userprofile'),
        ),
        migrations.CreateModel(
            name='ContentSimilarity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id_1', models.UUIDField()),
                ('object_id_2', models.UUIDField()),
                ('similarity_score', models.FloatField(help_text='Similarity score between 0 and 1')),
                ('similarity_type', models.CharField(choices=[('content', 'Content Similarity'), ('hashtag', 'Hashtag Similarity'), ('author', 'Author Similarity'), ('engagement', 'Engagement Similarity'), ('combined', 'Combined Similarity')], default='combined', max_length=20)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_as_content_1', to='contenttypes.contenttype')),
                ('content_type_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_as_content_2', to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='ContentReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('harassment', 'Harassment'), ('hate_speech', 'Hate Speech'), ('violence', 'Violence'), ('nudity', 'Nudity/Sexual Content'), ('misinformation', 'Misinformation'), ('copyright', 'Copyright Violation'), ('self_harm', 'Self-harm'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True, help_text='Additional details about the report', max_length=500)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewing', 'Under Review'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed'), ('escalated', 'Escalated')], default='pending', max_length=20)),
                ('review_notes', models.TextField(blank=True)),
                ('action_taken', models.CharField(blank=True, help_text='Action taken by moderator', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_reports_made', to='accounts.userprofile')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_reviews', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ContentExperimentResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('control_sample_size', models.IntegerField(default=0)),
                ('test_sample_size', models.IntegerField(default=0)),
                ('control_avg_response_time', models.FloatField(blank=True, null=True)),
                ('test_avg_response_time', models.FloatField(blank=True, null=True)),
                ('control_avg_accuracy', models.FloatField(blank=True, null=True)),
                ('test_avg_accuracy', models.FloatField(blank=True, null=True)),
                ('control_engagement_rate', models.FloatField(blank=True, null=True)),
                ('test_engagement_rate', models.FloatField(blank=True, null=True)),
                ('control_click_through_rate', models.FloatField(blank=True, null=True)),
                ('test_click_through_rate', models.FloatField(blank=True, null=True)),
                ('control_conversion_rate', models.FloatField(blank=True, null=True)),
                ('test_conversion_rate', models.FloatField(blank=True, null=True)),
                ('p_value', models.FloatField(blank=True, help_text='Statistical significance p-value', null=True)),
                ('confidence_interval', models.JSONField(blank=True, default=dict, help_text='95% confidence interval')),
                ('winner', models.CharField(blank=True, choices=[('control', 'Control Algorithm'), ('test', 'Test Algorithm'), ('inconclusive', 'Inconclusive')], max_length=20, null=True)),
                ('improvement_percentage', models.FloatField(blank=True, help_text='Percentage improvement of winner over loser', null=True)),
                ('summary', models.TextField(blank=True, help_text='Executive summary of results')),
                ('detailed_analysis', models.JSONField(blank=True, default=dict, help_text='Detailed statistical analysis')),
                ('analyzed_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('analyzed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.userprofile')),
                ('experiment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='content.contentexperiment')),
            ],
            options={
                'verbose_name': 'Content Experiment Result',
                'verbose_name_plural': 'Content Experiment Results',
            },
        ),
        migrations.CreateModel(
            name='ContentExperimentMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(choices=[('recommendation_view', 'Recommendation View'), ('recommendation_click', 'Recommendation Click'), ('post_like', 'Post Like'), ('post_dislike', 'Post Dislike'), ('post_comment', 'Post Comment'), ('post_share', 'Post Share'), ('post_repost', 'Post Repost'), ('content_engagement', 'Content Engagement'), ('session_duration', 'Session Duration'), ('algorithm_response_time', 'Algorithm Response Time'), ('recommendation_accuracy', 'Recommendation Accuracy'), ('user_satisfaction', 'User Satisfaction'), ('click_through_rate', 'Click Through Rate'), ('conversion_rate', 'Conversion Rate')], max_length=50)),
                ('value', models.FloatField(help_text='Metric value (response time, accuracy score, etc.)')),
                ('count', models.IntegerField(default=1, help_text='Number of occurrences')),
                ('algorithm_used', models.CharField(choices=[('content_based', 'Content Based'), ('collaborative', 'Collaborative Filtering'), ('trending', 'Trending Content'), ('trending_24h', 'Trending 24 Hours'), ('trending_week', 'Trending This Week'), ('geo_based', 'Geographical Based'), ('popular', 'Popular Content'), ('similar_users', 'Similar Users'), ('hashtag_based', 'Hashtag Based'), ('manual', 'Manual Recommendation')], max_length=50)),
                ('object_id', models.UUIDField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metric context')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='content.contentexperiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_experiment_metrics', to='accounts.userprofile')),
            ],
            options={
                'verbose_name': 'Content Experiment Metric',
                'verbose_name_plural': 'Content Experiment Metrics',
            },
        ),
        migrations.CreateModel(
            name='ContentAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('analysis_type', models.CharField(choices=[('sentiment', 'Sentiment Analysis'), ('toxicity', 'Toxicity Detection'), ('spam', 'Spam Detection'), ('language', 'Language Detection'), ('topic', 'Topic Classification'), ('emotion', 'Emotion Detection'), ('hate_speech', 'Hate Speech Detection'), ('violence', 'Violence Detection'), ('adult_content', 'Adult Content Detection')], max_length=20)),
                ('sentiment', models.CharField(blank=True, choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral'), ('mixed', 'Mixed')], max_length=10, null=True)),
                ('sentiment_confidence', models.FloatField(blank=True, help_text='Confidence score 0.0-1.0', null=True)),
                ('toxicity_score', models.FloatField(blank=True, help_text='Toxicity score 0.0-1.0', null=True)),
                ('spam_score', models.FloatField(blank=True, help_text='Spam probability 0.0-1.0', null=True)),
                ('hate_speech_score', models.FloatField(blank=True, help_text='Hate speech probability 0.0-1.0', null=True)),
                ('violence_score', models.FloatField(blank=True, help_text='Violence content probability 0.0-1.0', null=True)),
                ('adult_content_score', models.FloatField(blank=True, help_text='Adult content probability 0.0-1.0', null=True)),
                ('detected_language', models.CharField(blank=True, help_text="ISO language code (e.g., 'en', 'fr', 'es')", max_length=10)),
                ('language_confidence', models.FloatField(blank=True, help_text='Language detection confidence 0.0-1.0', null=True)),
                ('topics', models.JSONField(blank=True, default=list, help_text='List of detected topics with confidence scores')),
                ('emotions', models.JSONField(blank=True, default=dict, help_text='Emotion scores (joy, anger, fear, etc.)')),
                ('model_name', models.CharField(blank=True, help_text='Name/version of the ML model used', max_length=100)),
                ('model_version', models.CharField(blank=True, max_length=50)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('is_human_verified', models.BooleanField(default=False, help_text='Whether results have been verified by human moderator')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='content.post'),
        ),
        migrations.CreateModel(
            name='BotDetectionProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_bot_score', models.FloatField(default=0.0, help_text='Overall bot probability score 0.0-1.0')),
                ('timing_score', models.FloatField(default=0.0, help_text='Bot score based on posting timing patterns')),
                ('content_score', models.FloatField(default=0.0, help_text='Bot score based on content patterns')),
                ('behavior_score', models.FloatField(default=0.0, help_text='Bot score based on user behavior patterns')),
                ('activity_pattern_score', models.FloatField(default=0.0, help_text='Activity pattern analysis score')),
                ('content_pattern_score', models.FloatField(default=0.0, help_text='Content pattern analysis score')),
                ('interaction_pattern_score', models.FloatField(default=0.0, help_text='Interaction pattern analysis score')),
                ('temporal_pattern_score', models.FloatField(default=0.0, help_text='Temporal pattern analysis score')),
                ('behavior_analysis', models.JSONField(blank=True, default=dict, help_text='Detailed behavior analysis data')),
                ('avg_posting_interval', models.FloatField(blank=True, help_text='Average seconds between posts', null=True)),
                ('posting_regularity_score', models.FloatField(default=0.0, help_text='How regular posting intervals are (0=random, 1=very regular)')),
                ('rapid_posting_incidents', models.IntegerField(default=0, help_text='Number of times user posted very rapidly')),
                ('duplicate_content_ratio', models.FloatField(default=0.0, help_text='Ratio of duplicate/similar content 0.0-1.0')),
                ('link_spam_score', models.FloatField(default=0.0, help_text='Score for excessive link posting')),
                ('engagement_ratio', models.FloatField(default=0.0, help_text='Ratio of posts to received engagement')),
                ('follows_to_followers_ratio', models.FloatField(default=0.0, help_text='Ratio of following to followers')),
                ('profile_completeness_score', models.FloatField(default=0.0, help_text='How complete the user profile is')),
                ('is_flagged_as_bot', models.BooleanField(default=False, help_text='Whether user is flagged as suspected bot')),
                ('is_verified_human', models.BooleanField(default=False, help_text='Whether user has been verified as human')),
                ('auto_blocked', models.BooleanField(default=False, help_text='Whether user has been automatically blocked as bot')),
                ('is_flagged', models.BooleanField(default=False, help_text='General flagged status')),
                ('flagged_at', models.DateTimeField(blank=True, help_text='When user was flagged', null=True)),
                ('last_analysis', models.DateTimeField(blank=True, null=True)),
                ('analysis_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bot_detection_profile', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='BotDetectionEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('rapid_posting', 'Rapid Posting'), ('duplicate_content', 'Duplicate Content'), ('spam_links', 'Spam Links'), ('unusual_timing', 'Unusual Timing Pattern'), ('fake_engagement', 'Fake Engagement'), ('profile_suspicious', 'Suspicious Profile'), ('mass_following', 'Mass Following'), ('copy_paste', 'Copy-Paste Content'), ('automated_behavior', 'Automated Behavior')], max_length=20)),
                ('severity', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], default=2)),
                ('description', models.TextField(max_length=500)),
                ('confidence_score', models.FloatField(help_text='Confidence in bot detection 0.0-1.0')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detailed event information')),
                ('detected_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the bot behavior was detected')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional event-specific data')),
                ('action_taken', models.CharField(blank=True, help_text='Automatic action taken', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('related_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bot_detection_events', to='content.comment')),
                ('related_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bot_detection_events', to='content.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_detection_events', to='accounts.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='automoderationaction',
            name='rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions_taken', to='content.contentmoderationrule'),
        ),
        migrations.AddField(
            model_name='automoderationaction',
            name='target_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auto_moderation_actions_received', to='accounts.userprofile'),
        ),
        migrations.AddField(
            model_name='automoderationaction',
            name='triggered_by_analysis',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_actions', to='content.contentanalysis'),
        ),
        migrations.AddField(
            model_name='automoderationaction',
            name='triggered_by_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_actions', to='content.contentmoderationrule'),
        ),
        migrations.CreateModel(
            name='UserContentPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preferred_hashtags', models.JSONField(default=dict, help_text='Dictionary of hashtag names to preference scores')),
                ('preferred_content_types', models.JSONField(default=dict, help_text='Dictionary of content types to preference scores')),
                ('interaction_patterns', models.JSONField(default=dict, help_text='User interaction behavior patterns')),
                ('active_hours', models.JSONField(default=list, help_text='Hours (0-23) when user is most active')),
                ('preferred_content_length', models.PositiveIntegerField(default=0, help_text='Avg preferred content length')),
                ('preferred_communities', models.JSONField(default=dict, help_text='Map of community IDs to preference scores')),
                ('total_interactions', models.PositiveIntegerField(default=0)),
                ('analysis_period_days', models.PositiveIntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_analysis_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='content_preferences', to='accounts.userprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['user'], name='content_use_user_id_15eead_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserContentExperimentAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group', models.CharField(choices=[('control', 'Control Group'), ('test', 'Test Group')], max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='content.contentexperiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_experiment_assignments', to='accounts.userprofile')),
            ],
            options={
                'verbose_name': 'User Content Experiment Assignment',
                'verbose_name_plural': 'User Content Experiment Assignments',
                'indexes': [models.Index(fields=['user', 'experiment'], name='content_use_user_id_13e549_idx'), models.Index(fields=['experiment', 'group'], name='content_use_experim_9a4293_idx')],
                'unique_together': {('user', 'experiment')},
            },
        ),
        migrations.CreateModel(
            name='UserActivityPattern',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('hour', models.IntegerField(help_text='Hour of day 0-23')),
                ('posts_count', models.IntegerField(default=0)),
                ('comments_count', models.IntegerField(default=0)),
                ('likes_count', models.IntegerField(default=0)),
                ('follows_count', models.IntegerField(default=0)),
                ('avg_interval_between_actions', models.FloatField(blank=True, help_text='Average seconds between actions', null=True)),
                ('min_interval_between_actions', models.FloatField(blank=True, help_text='Minimum seconds between actions', null=True)),
                ('rapid_activity_detected', models.BooleanField(default=False)),
                ('suspicious_patterns', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_patterns', to='accounts.userprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'date'], name='content_use_user_id_de9535_idx'), models.Index(fields=['date', 'hour'], name='content_use_date_6144f5_idx'), models.Index(fields=['rapid_activity_detected'], name='content_use_rapid_a_921d79_idx')],
                'unique_together': {('user', 'date', 'hour')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.IntegerField(default=0, help_text='Rating (-1,0,1 or extended scale)')),
                ('feedback', models.CharField(blank=True, help_text='Short tag (relevant/not_relevant/spam)', max_length=50)),
                ('comments', models.TextField(blank=True, help_text='Optional comments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='content.contentrecommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to='accounts.userprofile')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='content_rec_user_id_653c4f_idx'), models.Index(fields=['rating'], name='content_rec_rating_25c261_idx'), models.Index(fields=['feedback'], name='content_rec_feedbac_17f05a_idx')],
                'unique_together': {('user', 'recommendation')},
            },
        ),
        migrations.CreateModel(
            name='PostSee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('seen_at', models.DateTimeField(auto_now_add=True)),
                ('view_duration_seconds', models.PositiveIntegerField(default=0)),
                ('scroll_percentage', models.FloatField(default=0.0)),
                ('source', models.CharField(choices=[('feed', 'Main Feed'), ('profile', 'User Profile'), ('community', 'Community Feed'), ('search', 'Search Results'), ('notification', 'Notification'), ('direct_link', 'Direct Link'), ('share', 'Shared Link')], default='feed', max_length=20)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet')], default='desktop', max_length=10)),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('clicked_links', models.JSONField(blank=True, default=list)),
                ('media_viewed', models.JSONField(blank=True, default=list)),
                ('is_engaged', models.BooleanField(default=False)),
                ('time_to_engagement_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('last_interaction_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sees', to='content.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_sees', to='accounts.userprofile')),
            ],
            options={
                'verbose_name': 'Post See',
                'verbose_name_plural': 'Post Sees',
                'ordering': ['-seen_at'],
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.CreateModel(
            name='PostHashtag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hashtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.hashtag')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_hashtags', to='content.post')),
            ],
            options={
                'unique_together': {('post', 'hashtag')},
            },
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', '-created_at'], name='content_pos_author__7f6b18_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['visibility', '-created_at'], name='content_pos_visibil_7b7427_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['post_type', '-created_at'], name='content_pos_post_ty_96c246_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['community', '-created_at'], name='content_pos_communi_6e3093_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['status', 'priority', '-created_at'], name='content_mod_status_711f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['assigned_to', 'status'], name='content_mod_assigne_129461_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['resolved_by', '-resolved_at'], name='content_mod_resolve_705839_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['content_type', 'object_id'], name='content_mod_content_738235_idx'),
        ),
        migrations.AddIndex(
            model_name='moderationqueue',
            index=models.Index(fields=['expires_at'], name='content_mod_expires_3fb307_idx'),
        ),
        migrations.AddIndex(
            model_name='mention',
            index=models.Index(fields=['mentioned_user', '-created_at'], name='content_men_mention_59cf3a_idx'),
        ),
        migrations.AddIndex(
            model_name='mention',
            index=models.Index(fields=['mentioning_user', '-created_at'], name='content_men_mention_12862d_idx'),
        ),
        migrations.AddIndex(
            model_name='mention',
            index=models.Index(fields=['post', '-created_at'], name='content_men_post_id_bf407b_idx'),
        ),
        migrations.AddIndex(
            model_name='mention',
            index=models.Index(fields=['comment', '-created_at'], name='content_men_comment_f72599_idx'),
        ),
        migrations.AddIndex(
            model_name='mediametadata',
            index=models.Index(fields=['post_media'], name='content_med_post_me_0f5626_idx'),
        ),
        migrations.AddIndex(
            model_name='mediametadata',
            index=models.Index(fields=['mime_type'], name='content_med_mime_ty_10a9b8_idx'),
        ),
        migrations.AddIndex(
            model_name='mediametadata',
            index=models.Index(fields=['is_processed'], name='content_med_is_proc_f23723_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['content_type', 'object_id'], name='content_lik_content_333018_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['user', '-created_at'], name='content_lik_user_id_8d2aeb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='dislike',
            index=models.Index(fields=['content_type', 'object_id'], name='content_dis_content_c5958a_idx'),
        ),
        migrations.AddIndex(
            model_name='dislike',
            index=models.Index(fields=['user', '-created_at'], name='content_dis_user_id_65f604_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dislike',
            unique_together={('user', 'content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='directsharerecipient',
            index=models.Index(fields=['recipient', 'is_read', '-created_at'], name='content_dir_recipie_49c6d6_idx'),
        ),
        migrations.AddIndex(
            model_name='directsharerecipient',
            index=models.Index(fields=['direct_share', '-created_at'], name='content_dir_direct__ceaa75_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='directsharerecipient',
            unique_together={('direct_share', 'recipient')},
        ),
        migrations.AddIndex(
            model_name='directshare',
            index=models.Index(fields=['sender', '-created_at'], name='content_dir_sender__787812_idx'),
        ),
        migrations.AddIndex(
            model_name='directshare',
            index=models.Index(fields=['post', '-created_at'], name='content_dir_post_id_02ee42_idx'),
        ),
        migrations.AddIndex(
            model_name='directshare',
            index=models.Index(fields=['-created_at'], name='content_dir_created_949bb2_idx'),
        ),
        migrations.AddIndex(
            model_name='contentsimilarity',
            index=models.Index(fields=['content_type_1', 'object_id_1', '-similarity_score'], name='content_con_content_bfdcdd_idx'),
        ),
        migrations.AddIndex(
            model_name='contentsimilarity',
            index=models.Index(fields=['content_type_2', 'object_id_2', '-similarity_score'], name='content_con_content_d55570_idx'),
        ),
        migrations.AddIndex(
            model_name='contentsimilarity',
            index=models.Index(fields=['calculated_at'], name='content_con_calcula_fa447f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentsimilarity',
            unique_together={('content_type_1', 'object_id_1', 'content_type_2', 'object_id_2', 'similarity_type')},
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['reporter', '-created_at'], name='content_con_reporte_b27f92_idx'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['status', '-created_at'], name='content_con_status_f4fa7c_idx'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['reason', '-created_at'], name='content_con_reason_c5fcaa_idx'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['content_type', 'object_id'], name='content_con_content_c0db6c_idx'),
        ),
        migrations.AddIndex(
            model_name='contentreport',
            index=models.Index(fields=['reviewed_by', '-reviewed_at'], name='content_con_reviewe_31ccd6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentreport',
            unique_together={('reporter', 'content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='contentrecommendation',
            index=models.Index(fields=['user', '-score', '-created_at'], name='content_con_user_id_d282ff_idx'),
        ),
        migrations.AddIndex(
            model_name='contentrecommendation',
            index=models.Index(fields=['user', 'recommendation_type'], name='content_con_user_id_94bdb0_idx'),
        ),
        migrations.AddIndex(
            model_name='contentrecommendation',
            index=models.Index(fields=['expires_at'], name='content_con_expires_c36703_idx'),
        ),
        migrations.AddIndex(
            model_name='contentrecommendation',
            index=models.Index(fields=['created_at'], name='content_con_created_5489d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentrecommendation',
            unique_together={('user', 'content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='contentmoderationrule',
            index=models.Index(fields=['rule_type', 'is_active'], name='content_con_rule_ty_0854d3_idx'),
        ),
        migrations.AddIndex(
            model_name='contentmoderationrule',
            index=models.Index(fields=['community', 'is_active'], name='content_con_communi_a9846a_idx'),
        ),
        migrations.AddIndex(
            model_name='contentmoderationrule',
            index=models.Index(fields=['severity_level', '-created_at'], name='content_con_severit_a65479_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperimentmetric',
            index=models.Index(fields=['experiment', 'metric_type'], name='content_con_experim_c5b7a5_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperimentmetric',
            index=models.Index(fields=['user', 'experiment'], name='content_con_user_id_6d2590_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperimentmetric',
            index=models.Index(fields=['recorded_at'], name='content_con_recorde_f578e3_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperimentmetric',
            index=models.Index(fields=['algorithm_used', 'metric_type'], name='content_con_algorit_5b88af_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperimentmetric',
            index=models.Index(fields=['content_type', 'object_id'], name='content_con_content_7743f0_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperiment',
            index=models.Index(fields=['status', 'start_date'], name='content_con_status_13c8c8_idx'),
        ),
        migrations.AddIndex(
            model_name='contentexperiment',
            index=models.Index(fields=['created_by'], name='content_con_created_7e332f_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['content_type', 'object_id'], name='content_con_content_cba86f_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['analysis_type', '-created_at'], name='content_con_analysi_e49363_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['sentiment', '-created_at'], name='content_con_sentime_4512cc_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['toxicity_score'], name='content_con_toxicit_6c1501_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['spam_score'], name='content_con_spam_sc_80058d_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['hate_speech_score'], name='content_con_hate_sp_1fbe00_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['detected_language'], name='content_con_detecte_4e7e1d_idx'),
        ),
        migrations.AddIndex(
            model_name='contentanalysis',
            index=models.Index(fields=['is_human_verified'], name='content_con_is_huma_7781d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentanalysis',
            unique_together={('content_type', 'object_id', 'analysis_type')},
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post', '-created_at'], name='content_com_post_id_66d9ec_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author', '-created_at'], name='content_com_author__2c4b58_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionprofile',
            index=models.Index(fields=['overall_bot_score'], name='content_bot_overall_f63ab0_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionprofile',
            index=models.Index(fields=['is_flagged_as_bot'], name='content_bot_is_flag_27267b_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionprofile',
            index=models.Index(fields=['auto_blocked'], name='content_bot_auto_bl_ffa2a1_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionprofile',
            index=models.Index(fields=['last_analysis'], name='content_bot_last_an_a1d33c_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionevent',
            index=models.Index(fields=['user', '-created_at'], name='content_bot_user_id_07e024_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionevent',
            index=models.Index(fields=['event_type', '-created_at'], name='content_bot_event_t_bcb47b_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionevent',
            index=models.Index(fields=['severity', '-created_at'], name='content_bot_severit_dc00e6_idx'),
        ),
        migrations.AddIndex(
            model_name='botdetectionevent',
            index=models.Index(fields=['confidence_score'], name='content_bot_confide_1e0f71_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['content_type', 'object_id'], name='content_aut_content_4bef48_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['target_user', '-created_at'], name='content_aut_target__d3f6fa_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['action_type', 'status'], name='content_aut_action__8f255f_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['severity_level', '-created_at'], name='content_aut_severit_4fd29c_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['status', '-created_at'], name='content_aut_status_2a6794_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['reviewed_by', '-reviewed_at'], name='content_aut_reviewe_1cceab_idx'),
        ),
        migrations.AddIndex(
            model_name='automoderationaction',
            index=models.Index(fields=['expires_at'], name='content_aut_expires_0a7e2f_idx'),
        ),
    ]
