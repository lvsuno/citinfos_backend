# Generated by Django 4.2.25 on 2025-10-14 14:25

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('admin_level', models.CharField(choices=[('super_admin', 'Super Administrator'), ('system_admin', 'System Administrator'), ('content_admin', 'Content Administrator'), ('user_admin', 'User Administrator'), ('support_admin', 'Support Administrator')], default='system_admin', max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('employee_id', models.CharField(blank=True, max_length=50)),
                ('permissions', models.JSONField(blank=True, default=list, help_text='List of specific permissions assigned')),
                ('access_level', models.PositiveIntegerField(default=1, help_text='Numeric access level (1-10, higher = more access)')),
                ('can_access_sensitive_data', models.BooleanField(default=False)),
                ('can_modify_system_settings', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_manage_content', models.BooleanField(default=False)),
                ('can_view_analytics', models.BooleanField(default=False)),
                ('can_export_data', models.BooleanField(default=False)),
                ('work_schedule', models.JSONField(blank=True, default=dict, help_text='Work schedule by day of week')),
                ('emergency_contact', models.CharField(blank=True, max_length=20)),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes about this admin')),
                ('last_admin_action', models.DateTimeField(blank=True, null=True)),
                ('total_admin_actions', models.PositiveIntegerField(default=0)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('ip_whitelist', models.JSONField(blank=True, default=list, help_text='List of allowed IP addresses')),
                ('session_timeout_minutes', models.PositiveIntegerField(default=60, help_text='Session timeout in minutes')),
                ('is_active', models.BooleanField(default=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('last_security_review', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BadgeDefinition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.SlugField(help_text='Internal badge code', unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('name', models.CharField(blank=True, help_text='Badge name extracted from full_name', max_length=100)),
                ('tier', models.CharField(blank=True, help_text='Badge tier extracted from full_name (Bronze/Silver/Gold)', max_length=20)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('icon', models.CharField(blank=True, help_text='Icon reference or asset path', max_length=150)),
                ('criteria', models.JSONField(default=dict, help_text='Criteria definition JSON')),
                ('is_secret', models.BooleanField(default=False, help_text='If true, not listed until earned')),
                ('points', models.PositiveIntegerField(default=0, help_text='Points granted when earned')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommercialProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('business_name', models.CharField(max_length=200)),
                ('business_type', models.CharField(choices=[('retailer', 'Retailer'), ('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('service_provider', 'Service Provider'), ('rental_company', 'Rental Company'), ('marketplace', 'Marketplace'), ('other', 'Other')], default='retailer', max_length=100)),
                ('business_description', models.TextField(blank=True)),
                ('business_phone', models.CharField(blank=True, max_length=20)),
                ('business_email', models.EmailField(blank=True, max_length=254)),
                ('website', models.URLField(blank=True)),
                ('business_address', models.CharField(blank=True, max_length=255)),
                ('tax_id', models.CharField(blank=True, help_text='Business tax identification number', max_length=50)),
                ('registration_number', models.CharField(blank=True, max_length=100)),
                ('established_year', models.PositiveIntegerField(blank=True, null=True)),
                ('employee_count', models.CharField(blank=True, choices=[('1', '1'), ('2-10', '2-10'), ('11-50', '11-50'), ('51-200', '51-200'), ('201-1000', '201-1000'), ('1000+', '1000+')], max_length=20)),
                ('product_categories', models.JSONField(blank=True, default=list, help_text='List of product categories')),
                ('services_offered', models.JSONField(blank=True, default=list, help_text='List of services offered')),
                ('brands_carried', models.JSONField(blank=True, default=list, help_text='List of brands carried')),
                ('business_hours', models.JSONField(blank=True, default=dict, help_text='Business operating hours by day of week')),
                ('social_media_links', models.JSONField(blank=True, default=dict)),
                ('marketing_preferences', models.JSONField(blank=True, default=dict)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_documents', models.JSONField(blank=True, default=list)),
                ('trust_score', models.FloatField(default=0.0)),
                ('total_sales', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('customer_rating', models.FloatField(default=0.0)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('subscription_plan', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='basic', max_length=50)),
                ('subscription_expires', models.DateTimeField(blank=True, null=True)),
                ('featured_listings_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContactChangeLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('request_created', 'Change Request Created'), ('current_code_sent', 'Current Verification Code Sent'), ('current_verified', 'Current Contact Verified'), ('new_code_sent', 'New Verification Code Sent'), ('new_verified', 'New Contact Verified'), ('change_completed', 'Contact Change Completed'), ('request_expired', 'Request Expired'), ('request_cancelled', 'Request Cancelled'), ('verification_failed', 'Verification Failed')], max_length=20)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Contact Change Log',
                'verbose_name_plural': 'Contact Change Logs',
            },
        ),
        migrations.CreateModel(
            name='ContactChangeRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('change_type', models.CharField(choices=[('email', 'Email Change'), ('phone', 'Phone Change')], max_length=10)),
                ('status', models.CharField(choices=[('pending_current_verification', 'Pending Current Contact Verification'), ('current_verified', 'Current Contact Verified'), ('pending_new_verification', 'Pending New Contact Verification'), ('completed', 'Change Completed'), ('expired', 'Request Expired'), ('cancelled', 'Request Cancelled')], default='pending_current_verification', max_length=30)),
                ('current_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('current_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('new_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('current_verification_code', models.CharField(blank=True, max_length=8)),
                ('new_verification_code', models.CharField(blank=True, max_length=8)),
                ('current_verified_at', models.DateTimeField(blank=True, null=True)),
                ('new_verified_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_verification_attempts', models.PositiveIntegerField(default=0)),
                ('new_verification_attempts', models.PositiveIntegerField(default=0)),
                ('max_attempts', models.PositiveIntegerField(default=3)),
            ],
            options={
                'verbose_name': 'Contact Change Request',
                'verbose_name_plural': 'Contact Change Requests',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ModeratorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('moderator_level', models.CharField(choices=[('junior', 'Junior Moderator'), ('senior', 'Senior Moderator'), ('lead', 'Lead Moderator'), ('community_mod', 'Community Moderator'), ('content_mod', 'Content Moderator'), ('global_mod', 'Global Moderator')], default='junior', max_length=20)),
                ('specialization', models.CharField(choices=[('content', 'Content Moderation'), ('community', 'Community Management'), ('spam', 'Spam Detection'), ('safety', 'Safety & Trust'), ('general', 'General Moderation')], default='general', max_length=100)),
                ('assigned_communities', models.JSONField(blank=True, default=list, help_text='List of community IDs assigned to moderate')),
                ('assigned_categories', models.JSONField(blank=True, default=list, help_text='List of content categories assigned')),
                ('languages', models.JSONField(blank=True, default=list, help_text='Languages this moderator can handle')),
                ('can_remove_posts', models.BooleanField(default=True)),
                ('can_remove_comments', models.BooleanField(default=True)),
                ('can_ban_users', models.BooleanField(default=False)),
                ('can_suspend_users', models.BooleanField(default=False)),
                ('can_feature_content', models.BooleanField(default=False)),
                ('can_manage_reports', models.BooleanField(default=True)),
                ('can_escalate_issues', models.BooleanField(default=True)),
                ('can_send_warnings', models.BooleanField(default=True)),
                ('total_actions', models.PositiveIntegerField(default=0)),
                ('posts_reviewed', models.PositiveIntegerField(default=0)),
                ('posts_approved', models.PositiveIntegerField(default=0)),
                ('posts_removed', models.PositiveIntegerField(default=0)),
                ('comments_reviewed', models.PositiveIntegerField(default=0)),
                ('comments_approved', models.PositiveIntegerField(default=0)),
                ('comments_removed', models.PositiveIntegerField(default=0)),
                ('reports_handled', models.PositiveIntegerField(default=0)),
                ('users_warned', models.PositiveIntegerField(default=0)),
                ('users_suspended', models.PositiveIntegerField(default=0)),
                ('users_banned', models.PositiveIntegerField(default=0)),
                ('accuracy_score', models.FloatField(default=0.0, help_text='Moderation accuracy percentage')),
                ('response_time_avg', models.FloatField(default=0.0, help_text='Average response time in minutes')),
                ('community_feedback_score', models.FloatField(default=0.0)),
                ('escalation_rate', models.FloatField(default=0.0, help_text='Percentage of cases escalated')),
                ('work_schedule', models.JSONField(blank=True, default=dict, help_text='Work schedule by day of week and time zones')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_available', models.BooleanField(default=True)),
                ('current_shift_start', models.DateTimeField(blank=True, null=True)),
                ('current_shift_end', models.DateTimeField(blank=True, null=True)),
                ('training_completed', models.JSONField(blank=True, default=list, help_text='List of completed training modules')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='List of moderation certifications')),
                ('training_score', models.FloatField(default=0.0)),
                ('last_training_date', models.DateTimeField(blank=True, null=True)),
                ('next_training_due', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('probation_until', models.DateTimeField(blank=True, null=True)),
                ('last_action_date', models.DateTimeField(blank=True, null=True)),
                ('last_performance_review', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('business_address', models.CharField(blank=True, max_length=255)),
                ('company_name', models.CharField(blank=True, max_length=200)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                ('years_experience', models.PositiveIntegerField(blank=True, null=True)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('services_offered', models.JSONField(blank=True, default=list)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_documents', models.JSONField(blank=True, default=list)),
                ('trust_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('user_message', 'Message utilisateur'), ('admin_reply', 'Réponse admin'), ('system_note', 'Note système'), ('status_change', 'Changement de statut')], default='user_message', max_length=20)),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_read_by_user', models.BooleanField(default=False)),
                ('is_read_by_admin', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ticket_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('user_email', models.EmailField(max_length=254)),
                ('user_name', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('technical', 'Problème technique'), ('account', 'Problème de compte'), ('billing', 'Facturation'), ('feature_request', 'Demande de fonctionnalité'), ('report', 'Signalement'), ('other', 'Autre')], default='other', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('urgent', 'Urgente')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Ouvert'), ('in_progress', 'En cours'), ('waiting_user', 'En attente utilisateur'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='open', max_length=20)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('browser_info', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_trigger_event', models.CharField(blank=True, help_text='Optional event type that triggered award', max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Login Failed'), ('register', 'Register'), ('password_change', 'Password Change'), ('password_reset_request', 'Password Reset Request'), ('password_reset_complete', 'Password Reset Complete'), ('email_change', 'Email Change'), ('email_verify', 'Email Verification'), ('two_factor_enable', 'Two-Factor Authentication Enabled'), ('two_factor_disable', 'Two-Factor Authentication Disabled'), ('security_login_failed', 'Login Failed'), ('security_suspicious_activity', 'Suspicious Activity'), ('security_account_locked', 'Account Locked'), ('security_password_breach', 'Password Breach Detected'), ('security_two_factor_enabled', 'Two-Factor Authentication Enabled'), ('security_session_hijack', 'Session Hijack Detected'), ('profile_update', 'Profile Update'), ('profile_picture_change', 'Profile Picture Change'), ('privacy_update', 'Privacy Settings Update'), ('notification_settings_update', 'Notification Settings Update'), ('account_deactivation', 'Account Deactivation'), ('account_reactivation', 'Account Reactivation'), ('account_deletion_request', 'Account Deletion Request'), ('data_export_request', 'Data Export Request'), ('account_delete', 'Account Deleted'), ('account_reactivate', 'Account Reactivated'), ('session_expire', 'Session Expired'), ('user_follow', 'User Follow'), ('user_unfollow', 'User Unfollow'), ('user_block', 'User Block'), ('user_unblock', 'User Unblock'), ('profile_view', 'Profile View'), ('pro_upgrade', 'Professional Account Upgrade'), ('pro_verification_request', 'Professional Verification Request'), ('pro_verification_complete', 'Professional Verification Complete'), ('suspicious_login', 'Suspicious Login Attempt'), ('device_change', 'New Device Login'), ('location_change', 'New Location Login'), ('session_timeout', 'Session Timeout'), ('forced_logout', 'Forced Logout'), ('session_create', 'Session Started'), ('session_update', 'Session Updated'), ('event_track', 'Event Tracked'), ('settings', 'Settings Changed'), ('api_access', 'API Access'), ('search_perform', 'Search Performed'), ('file_upload', 'File Uploaded'), ('error_encountered', 'Error Encountered'), ('analytics_view', 'Analytics Viewed'), ('daily_analytics_view', 'Daily Analytics Viewed'), ('user_analytics_view', 'User Analytics Viewed'), ('metric_record', 'Metric Recorded'), ('error_log', 'Error Logged'), ('system_metric_view', 'System Metrics Viewed'), ('post_create', 'Post Created'), ('post_update', 'Post Updated'), ('post_delete', 'Post Deleted'), ('post_like', 'Post Liked'), ('post_unlike', 'Post Unliked'), ('post_share', 'Post Shared'), ('comment_create', 'Comment Created'), ('comment_update', 'Comment Updated'), ('comment_delete', 'Comment Deleted'), ('post_view', 'Post Viewed'), ('post_bookmark', 'Post Bookmarked'), ('file_download', 'File Downloaded'), ('media_access', 'Media Accessed'), ('hashtag_create', 'Hashtag Created'), ('hashtag_follow', 'Hashtag Followed'), ('hashtag_unfollow', 'Hashtag Unfollowed'), ('community_create', 'Community Created'), ('community_update', 'Community Updated'), ('community_delete', 'Community Deleted'), ('community_join', 'Community Joined'), ('community_leave', 'Community Left'), ('community_post', 'Community Post'), ('community_membership_create', 'Community Membership Created'), ('community_role_create', 'Community Role Created'), ('community_role_update', 'Community Role Updated'), ('community_moderation', 'Community Moderation Action'), ('community_invitation_create', 'Community Invitation Created'), ('community_invitation_accept', 'Community Invitation Accepted'), ('community_invitation_decline', 'Community Invitation Declined'), ('ai_conversation_create', 'AI Conversation Started'), ('ai_conversation_update', 'AI Conversation Updated'), ('ai_conversation_delete', 'AI Conversation Deleted'), ('ai_message_create', 'AI Message Sent'), ('ai_message_rating', 'AI Message Rated'), ('ai_agent_create', 'AI Agent Created'), ('ai_agent_update', 'AI Agent Updated'), ('ai_agent_delete', 'AI Agent Deleted'), ('ai_model_create', 'AI Model Created'), ('ai_model_update', 'AI Model Updated'), ('ai_analytics_view', 'AI Analytics Viewed'), ('ai_model_performance_view', 'AI Model Performance Viewed'), ('ai_conversation_summary_create', 'AI Conversation Summary Created'), ('message_send', 'Message Sent'), ('chat_create', 'Chat Created'), ('chat_join', 'Chat Joined'), ('chat_leave', 'Chat Left'), ('message_read', 'Message Read'), ('message_delete', 'Message Deleted'), ('poll_create', 'Poll Created'), ('poll_update', 'Poll Updated'), ('poll_delete', 'Poll Deleted'), ('poll_view', 'Poll Viewed'), ('poll_vote', 'Poll Vote Cast'), ('poll_option_create', 'Poll Option Created'), ('poll_option_update', 'Poll Option Updated'), ('poll_option_delete', 'Poll Option Deleted'), ('poll_voter_create', 'Poll Voter Added'), ('poll_close', 'Poll Closed'), ('content_flagged', 'Content Flagged'), ('content_moderated', 'Content Moderated'), ('content_approved', 'Content Approved'), ('content_rejected', 'Content Rejected'), ('bot_detection', 'Bot Detected'), ('spam_detection', 'Spam Detected'), ('abuse_report', 'Abuse Reported'), ('badge_earned', 'Badge Earned'), ('badge_progress_update', 'Badge Progress Updated'), ('achievement_milestone', 'Achievement Milestone Reached'), ('badge_criteria_met', 'Badge Criteria Met'), ('badge_level_up', 'Badge Level Up'), ('badge_streak_started', 'Badge Streak Started'), ('badge_streak_maintained', 'Badge Streak Maintained'), ('badge_streak_broken', 'Badge Streak Broken'), ('badge_combo_earned', 'Badge Combo Earned'), ('achievement_points_awarded', 'Achievement Points Awarded'), ('badge_showcase_updated', 'Badge Showcase Updated'), ('badge_shared', 'Badge Shared'), ('achievement_celebration', 'Achievement Celebration'), ('badge_rarity_achieved', 'Rare Badge Achieved'), ('badge_collection_milestone', 'Badge Collection Milestone')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('requires_review', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('role', models.CharField(blank=True, choices=[('normal', 'Normal User'), ('commercial', 'Commercial'), ('professional', 'Professional'), ('admin', 'Admin'), ('moderator', 'Moderator')], default='normal', max_length=20, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(max_length=20)),
                ('date_of_birth', models.DateField()),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('cover_media', models.FileField(blank=True, help_text='Image or short video file used as user cover.', null=True, upload_to='covers/')),
                ('cover_media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video')], default='image', max_length=10)),
                ('is_private', models.BooleanField(default=False)),
                ('show_email', models.BooleanField(default=False)),
                ('show_phone', models.BooleanField(default=False)),
                ('show_location', models.BooleanField(default=True)),
                ('allow_advertising', models.BooleanField(default=False, help_text='If True the user allows advertising/marketing content to be shown.')),
                ('accept_terms', models.BooleanField(default=False, help_text='User has accepted terms and conditions during registration')),
                ('is_verified', models.BooleanField(default=False)),
                ('last_verified_at', models.DateTimeField(blank=True, null=True)),
                ('is_suspended', models.BooleanField(default=False)),
                ('suspended_at', models.DateTimeField(blank=True, null=True)),
                ('suspension_reason', models.TextField(blank=True)),
                ('follower_count', models.PositiveIntegerField(default=0)),
                ('following_count', models.PositiveIntegerField(default=0)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('polls_created_count', models.PositiveIntegerField(default=0, help_text='Number of polls created')),
                ('poll_votes_count', models.PositiveIntegerField(default=0, help_text='Number of poll votes cast')),
                ('likes_given_count', models.PositiveIntegerField(default=0, help_text='Likes the user has given')),
                ('comments_made_count', models.PositiveIntegerField(default=0, help_text='Comments the user has made')),
                ('reposts_count', models.PositiveIntegerField(default=0, help_text='Feed reposts performed')),
                ('shares_sent_count', models.PositiveIntegerField(default=0, help_text='Private direct shares sent')),
                ('shares_received_count', models.PositiveIntegerField(default=0, help_text='Private direct shares received')),
                ('best_comments_count', models.PositiveIntegerField(default=0, help_text='Comments marked as best')),
                ('communities_joined_count', models.PositiveIntegerField(default=0, help_text='Active communities this user has joined')),
                ('registration_index', models.PositiveIntegerField(default=0, help_text='Sequential index assigned at registration')),
                ('engagement_score', models.FloatField(default=0.0)),
                ('content_quality_score', models.FloatField(default=0.0)),
                ('interaction_frequency', models.FloatField(default=0.0)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=8, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_used', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification_code', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('warranty_expiry_notifications', models.BooleanField(default=True)),
                ('maintenance_reminder_notifications', models.BooleanField(default=True)),
                ('notification_frequency', models.CharField(choices=[('real_time', 'Real Time'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('never', 'Never')], default='real_time', max_length=20)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('friends', 'Friends Only'), ('private', 'Private')], default='public', max_length=20)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('es', 'Spanish'), ('de', 'German'), ('it', 'Italian')], default='en', max_length=5)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('auto_play_videos', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='accounts.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(max_length=255, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('location_data', models.JSONField(blank=True, default=dict)),
                ('device_fingerprint', models.CharField(blank=True, max_length=128)),
                ('fast_fingerprint', models.CharField(blank=True, help_text='Fast device fingerprint for quick session lookup', max_length=64)),
                ('persistent', models.BooleanField(default=False)),
                ('pages_visited', models.PositiveIntegerField(default=0)),
                ('termination_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_ended', models.BooleanField(db_index=True, default=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_restored', models.BooleanField(default=False)),
                ('restored_at', models.DateTimeField(blank=True, null=True)),
                ('last_deletion_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='accounts.userprofile')),
            ],
        ),
    ]
